---
title: "Class 8: PCA Mini Project"
author: "Sophia Wang A16838155"
format: pdf
---
It is important to consider scaling your data before analysis such as PCA.

For example:
```{r}
head(mtcars)
```
```{r}
colMeans(mtcars)
```


```{r}
apply(mtcars,2,sd)
```
```{r}
x <- scale(mtcars)
head(x)
```
```{r}
round(colMeans(x),2)
```
```{r}
apply(x,2,sd)
```

Load the data:
```{r}
# Save your input data file into your Project directory
fna.data <- "WisconsinCancer.csv"

# Complete the following code to input the data and store as wisc.df
wisc.df <- read.csv(fna.data, row.names=1)
head(wisc.df)
prcomp
```
Remove this first `diagnosis` column from the data set as I don't want to pass this to PCA etc. It is essentially the expert "answer" that we will compare our analysis results to.
```{r}
wisc.data <- wisc.df[,-1]
dim(wisc.data)
head(wisc.data)
diagnosis <- wisc.df[,1] 
table(diagnosis)
```

>Q1. How many observations are in this dataset?

569 observations

>Q2. How many of the observations have a malignant diagnosis?

212 Malignant

>Q3. How many variables/features in the data are suffixed with _mean?

10 variables in the data are suffixed with _mean.
```{r}
length(grep("_mean",colnames(wisc.data)))
```

##Principal Component Analysis

```{r}
colMeans(wisc.data)

apply(wisc.data,2,sd)
```
```{r}
wisc.pr <- prcomp(wisc.data,scale=T)
summary(wisc.pr)
```
See what is in our PCA result object:
```{r}
attributes(wisc.pr)
head(wisc.pr$x)
```



Main "PC score plot", "PC1 vs PC2 plot":
```{r}
plot(wisc.pr$x[,1],wisc.pr$x[,2],col=as.factor(diagnosis))
```



>Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)?

0.4427

>Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?

3 PCs to describe at least 70% of the original variance in the original variance in the data.

>Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?

7 PCs to describe at least 70% of the original variance in the original variance in the data.



```{r}
biplot(wisc.pr)
```
>Q7. What stands out to you about this plot? Is it easy or difficult to understand? Why

The plot is too crowded,very difficult to understand.

```{r}
plot( wisc.pr$x[,1],wisc.pr$x[,2] , col = as.factor(diagnosis) , 
     xlab = "PC1", ylab = "PC2")
```
>Q8. Generate a similar plot for principal components 1 and 3. What do you notice about these plots?

The clusters are less distinctive compared to PC1 vs PC2 plot.
```{r}
plot( wisc.pr$x[,1],wisc.pr$x[,3] , col = as.factor(diagnosis) , 
     xlab = "PC1", ylab = "PC2")
```

```{r}
# Create a data.frame for ggplot
df <- as.data.frame(wisc.pr$x)
df$diagnosis <- diagnosis

# Load the ggplot2 package
library(ggplot2)

# Make a scatter plot colored by diagnosis
ggplot(df) + 
  aes(PC1, PC2, col=diagnosis) + 
  geom_point()
```

```{r}
# Calculate variance of each component
pr.var <- wisc.pr$sdev^2
head(pr.var)
```

```{r}
# Variance explained by each principal component: pve
pve <- pr.var / sum(pr.var)

# Plot variance explained for each principal component
plot(pve, xlab = "Principal Component", 
     ylab = "Proportion of Variance Explained", 
     ylim = c(0, 1), type = "o")
```

```{r}
# Alternative scree plot of the same data, note data driven y-axis
barplot(pve, ylab = "Precent of Variance Explained",
     names.arg=paste0("PC",1:length(pve)), las=2, axes = FALSE)
axis(2, at=pve, labels=round(pve,2)*100 )
```
```{r}
## ggplot based graph
#install.packages("factoextra")
library(factoextra)
fviz_eig(wisc.pr, addlabels = TRUE)
```
>Q9. For the first principal component, what is the component of the loading vector (i.e. wisc.pr$rotation[,1]) for the feature concave.points_mean?

concave.points_mean: -0.26085376
```{r}
wisc.pr$rotation[,1]
```

>Q10. What is the minimum number of principal components required to explain 80% of the variance of the data?

5 PCs

##Hierarchical clustering

```{r}
# Scale the wisc.data data using the "scale()" function
data.scaled <- scale(wisc.data)
```

```{r}
data.dist <- dist(data.scaled)
```

```{r}
wisc.hclust <- hclust(data.dist, method="complete")
```

>Q11. Using the plot() and abline() functions, what is the height at which the clustering model has 4 clusters?

```{r}
plot(wisc.hclust)
abline(h=19.5, col="red", lty=2)
```

```{r}
wisc.hclust.clusters <- cutree(wisc.hclust,k=4)
wisc.hclust.clusters <- cutree(wisc.hclust,k=2)
```

```{r}
table(wisc.hclust.clusters, diagnosis)
```
>Q12. Can you find a better cluster vs diagnoses match by cutting into a different number of clusters between 2 and 10?

2 clusters

>Q13. Which method gives your favorite results for the same data.dist dataset? Explain your reasoning.

ward.D2 gives a clean dendrogram and the table() of ward.D2 has a reasonable distribution of M and B, where one group is composed mainly by M and the other group mainly by B.
```{r}
wisc.hclust.single<- hclust(data.dist, method="single")
plot(wisc.hclust.single)
wisc.hclust.clusters.single <- cutree(wisc.hclust.single,k=2)
table(wisc.hclust.clusters.single, diagnosis)

wisc.hclust.average<- hclust(data.dist, method="average")
plot(wisc.hclust.average)
wisc.hclust.clusters.average <- cutree(wisc.hclust.average,k=2)
table(wisc.hclust.clusters.average, diagnosis)

wisc.hclust.wardd2<- hclust(data.dist, method="ward.D2")
plot(wisc.hclust.wardd2)
wisc.hclust.clusters.wardd2 <- cutree(wisc.hclust.wardd2,k=2)
table(wisc.hclust.clusters.wardd2, diagnosis)
```
## Combine PCA and clustering

Our PCA results were in `wisc.pr$x`
```{r}
d <- dist(wisc.pr$x[,1:3])
hc <- hclust(d,method="ward.D2")
plot(hc)

```
Cut tree into two groups:
```{r}
grps <- cutree(hc, k=2)
table(grps)

```
>Q15. How well does the newly created model with four clusters separate out the two diagnoses?

The new combined model does a great job at separating the two diagnoses with one group mainly composed of B and the other of M.

Compare my clustering result(my `grps`) to the expert `diagnosis` 
```{r}
table(diagnosis,grps)
```

```{r}
plot(wisc.pr$x[,1:2], col=grps)
plot(wisc.pr$x[,1:2], col=as.factor(diagnosis))
```

>Q16. How well do the k-means and hierarchical clustering models you created in previous sections (i.e. before PCA) do in terms of separating the diagnoses? Again, use the table() function to compare the output of each model (wisc.km$cluster and wisc.hclust.clusters) with the vector containing the actual diagnoses.

The hcluster plot with `ward.D2` works as good as the plot we got for combining PCA and clustering, but `single` & `average` & `complete` does not effectively separate the data into two groups. 

##Prediction

```{r}
#url <- "new_samples.csv"
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc
```


```{r}
plot(wisc.pr$x[,1:2], col=as.factor(diagnosis))
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
legend("topright", legend = levels(as.factor(diagnosis)), col = 1:2, pch = 16)
```
>Q18. Which of these new patients should we prioritize for follow up based on your results?

Patient 2 should be prioritized for a follow up.
